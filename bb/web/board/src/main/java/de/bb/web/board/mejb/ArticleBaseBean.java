/*
 * This file is generated by MEJB.
 * DO NOT MODIFY THIS FILE!
*/


package de.bb.web.board.mejb;

abstract class ArticleBaseBean
  extends de.bb.mejb.CMPBean
  implements de.bb.web.board.mejb.ArticleBase
{

  /** attributes */
  protected String id;
  protected String id_topic;
  protected de.bb.web.board.mejb.Topic t$Topic;
  protected java.lang.String author = "";
  protected String content = "";
  protected java.sql.Timestamp modified;

  ArticleBaseBean(ArticleHomeBaseBean aHome) throws java.rmi.RemoteException
  {
    super(aHome);
  }

  public String getId() throws java.rmi.RemoteException
  {
    return id;
  }
  protected void setId(String a$Id) throws java.rmi.RemoteException
  {
    id = a$Id;
  }
  public String getTopicId() throws java.rmi.RemoteException
  {
    return id_topic;
  }
  public de.bb.web.board.mejb.Topic getTopic() throws java.rmi.RemoteException
  {
    if ( t$Topic == null)
      t$Topic = new TopicHomeBean().findByPrimaryKey(id_topic);
    return t$Topic;
  }
  public void setTopic(de.bb.web.board.mejb.Topic a$Topic) throws java.rmi.RemoteException  {
    t$Topic = a$Topic;
    id_topic = t$Topic == null ? null : t$Topic.getId();
  }
  public java.lang.String getAuthor() throws java.rmi.RemoteException
  {
    return author;
  }
  public void setAuthor(java.lang.String a$Author) throws java.rmi.RemoteException
  {
    author = a$Author;
  }
  public String getContent() throws java.rmi.RemoteException
  {
    return content;
  }
  public void setContent(String a$Content) throws java.rmi.RemoteException
  {
    content = a$Content;
  }
  public java.sql.Timestamp getModified() throws java.rmi.RemoteException
  {
    return modified;
  }
  public void setModified(java.sql.Timestamp a$Modified) throws java.rmi.RemoteException
  {
    modified = a$Modified;
  }
// from javax.ejb.EntityBean
  public void ejbStore() throws java.rmi.RemoteException
  {
    ((ArticleHomeBaseBean)myHome).store(this);
  }
  public void ejbRemove() throws java.rmi.RemoteException
  {
    ((ArticleHomeBaseBean)myHome).remove(this);
  }
  public void ejbLoad() throws java.rmi.RemoteException
  {
    ((ArticleHomeBaseBean)myHome).load(this);
  }
  public void ejbPassivate() throws java.rmi.RemoteException
  {
    // do nothing
  }
  public void ejbActivate() throws java.rmi.RemoteException
  {
    // do nothing
  }
  public void setEntityContext(javax.ejb.EntityContext ec) throws java.rmi.RemoteException
  {
    // do nothing
  }
  public void unsetEntityContext() throws java.rmi.RemoteException
  {
    // do nothing
  }
// from javax.ejb.EJBObject
  public javax.ejb.EJBHome getEJBHome() throws java.rmi.RemoteException
  {
    return myHome;
  }
  public javax.ejb.Handle getHandle() throws java.rmi.RemoteException
  {
    return null;
  }
  public Object getPrimaryKey() throws java.rmi.RemoteException
  {
    return id;
  }
  public boolean isIdentical(javax.ejb.EJBObject eo) throws java.rmi.RemoteException
  {
    return false;
  }
  public void remove() throws java.rmi.RemoteException
  {
    ejbRemove();
  }
  public void store() throws java.rmi.RemoteException
  {
    ejbStore();
  }
  protected void readValues(java.sql.ResultSet rs) throws java.sql.SQLException
  {
    id = rs.getString(1);
    id_topic = rs.getString(2);
    author = rs.getString(3);
    content = rs.getString(4);
    modified = rs.getTimestamp(5);
  }
  protected void writeValues(java.sql.PreparedStatement ps) throws java.sql.SQLException
  {
    ps.setString(1, id_topic);
    ps.setString(2, author);
    ps.setString(3, content);
    ps.setTimestamp(4, modified);
  }
  public StringBuffer toLog() throws java.rmi.RemoteException
  {
    StringBuffer sb = new StringBuffer();
    sb.append("id=\"" + id + "\">\n");
    sb.append("  <attribute name=\"id\">" + encodeXML(id) + "</attribute>\n");
    sb.append("  <attribute name=\"id_topic\">" + encodeXML(id_topic) + "</attribute>\n");
    sb.append("  <attribute name=\"author\">" + encodeXML(author) + "</attribute>\n");
    sb.append("  <attribute name=\"content\">" + encodeXML(content) + "</attribute>\n");
    sb.append("  <attribute name=\"modified\">" + encodeXML(modified) + "</attribute>\n");
    
    return sb;
  }
  public String toString()
  {
    StringBuffer sb = new StringBuffer();
    sb.append(id);
    sb.append(';');
    sb.append(id_topic);
    sb.append(';');
    sb.append(author);
    sb.append(';');
    sb.append(content);
    sb.append(';');
    sb.append(modified);
    return sb.toString();
  }
  public boolean equals(Object o)
  {
    if (!(o instanceof ArticleBaseBean)) return false;
    ArticleBaseBean x = (ArticleBaseBean)o;
    return (id == null && x.id == null) || id.equals(x.id);
  }
  protected void assign(de.bb.mejb.CMPBean sb, de.bb.mejb.CMPHomeBean home) throws java.rmi.RemoteException
  {
    ArticleBean b = (ArticleBean)sb;
    b.id = id;
    b.id_topic = id_topic;
    b.author = author;
    b.content = content;
    b.modified = modified;
  }
}

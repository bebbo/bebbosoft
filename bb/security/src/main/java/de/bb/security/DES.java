/******************************************************************************
 * $Source: /export/CVS/java/de/bb/security/src/main/java/de/bb/security/DES.java,v $
 * $Revision: 1.3 $
 * $Date: 2003/10/01 12:25:21 $
 * $Author: bebbo $
 * $Locker:  $
 * $State: Exp $
 * 
 * Copyright (c) by Stefan Bebbo Franke 1999-2000.
 * All rights reserved.
 *
 * DES implementation
 *
 *****************************************************************************/

package de.bb.security;

/**
 * Implementation of the DES encryption. 
 * @author bebbo
 */
public class DES extends BlockCipher
{
  // used key length
  private int keyLen;
  
  // known weak keys
  private static final long[] weakKeys =
  {
    0x0101010101010101L,
    0xFEFEFEFEFEFEFEFEL,
    0x1F1F1F1F0E0E0E0EL,
    0xE0E0E0E0F1F1F1F1L,
    0x01FE01FE01FE01FEL,
    0xFE01FE01FE01FE01L,
    0x1FE01FE00EF10EF1L,
    0xE01FE01FF10EF10EL,
    0x01E001E001F101F1L,
    0xE001E001F101F101L,
    0x1FFE1FFE0EFE0EFEL,
    0xFE1FFE1FFE0EFE0EL,
    0x011F011F010E010EL,
    0x1F011F010E010E01L,
    0xE0FEE0FEF1FEF1FEL,
    0xFEE0FEE0FEF1FEF1L,
  };

  private static final int shift[]={0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0};
  private static final int keyTable0[]={
    0x00000000,0x00000010,0x20000000,0x20000010,
    0x00010000,0x00010010,0x20010000,0x20010010,
    0x00000800,0x00000810,0x20000800,0x20000810,
    0x00010800,0x00010810,0x20010800,0x20010810,
    0x00000020,0x00000030,0x20000020,0x20000030,
    0x00010020,0x00010030,0x20010020,0x20010030,
    0x00000820,0x00000830,0x20000820,0x20000830,
    0x00010820,0x00010830,0x20010820,0x20010830,
    0x00080000,0x00080010,0x20080000,0x20080010,
    0x00090000,0x00090010,0x20090000,0x20090010,
    0x00080800,0x00080810,0x20080800,0x20080810,
    0x00090800,0x00090810,0x20090800,0x20090810,
    0x00080020,0x00080030,0x20080020,0x20080030,
    0x00090020,0x00090030,0x20090020,0x20090030,
    0x00080820,0x00080830,0x20080820,0x20080830,
    0x00090820,0x00090830,0x20090820,0x20090830
  };
  private static final int keyTable1[]={
    0x00000000,0x02000000,0x00002000,0x02002000,
    0x00200000,0x02200000,0x00202000,0x02202000,
    0x00000004,0x02000004,0x00002004,0x02002004,
    0x00200004,0x02200004,0x00202004,0x02202004,
    0x00000400,0x02000400,0x00002400,0x02002400,
    0x00200400,0x02200400,0x00202400,0x02202400,
    0x00000404,0x02000404,0x00002404,0x02002404,
    0x00200404,0x02200404,0x00202404,0x02202404,
    0x10000000,0x12000000,0x10002000,0x12002000,
    0x10200000,0x12200000,0x10202000,0x12202000,
    0x10000004,0x12000004,0x10002004,0x12002004,
    0x10200004,0x12200004,0x10202004,0x12202004,
    0x10000400,0x12000400,0x10002400,0x12002400,
    0x10200400,0x12200400,0x10202400,0x12202400,
    0x10000404,0x12000404,0x10002404,0x12002404,
    0x10200404,0x12200404,0x10202404,0x12202404
  };
  private static final int keyTable2[]={
    0x00000000,0x00000001,0x00040000,0x00040001,
    0x01000000,0x01000001,0x01040000,0x01040001,
    0x00000002,0x00000003,0x00040002,0x00040003,
    0x01000002,0x01000003,0x01040002,0x01040003,
    0x00000200,0x00000201,0x00040200,0x00040201,
    0x01000200,0x01000201,0x01040200,0x01040201,
    0x00000202,0x00000203,0x00040202,0x00040203,
    0x01000202,0x01000203,0x01040202,0x01040203,
    0x08000000,0x08000001,0x08040000,0x08040001,
    0x09000000,0x09000001,0x09040000,0x09040001,
    0x08000002,0x08000003,0x08040002,0x08040003,
    0x09000002,0x09000003,0x09040002,0x09040003,
    0x08000200,0x08000201,0x08040200,0x08040201,
    0x09000200,0x09000201,0x09040200,0x09040201,
    0x08000202,0x08000203,0x08040202,0x08040203,
    0x09000202,0x09000203,0x09040202,0x09040203
  };
  private static final int keyTable3[]={
    0x00000000,0x00100000,0x00000100,0x00100100,
    0x00000008,0x00100008,0x00000108,0x00100108,
    0x00001000,0x00101000,0x00001100,0x00101100,
    0x00001008,0x00101008,0x00001108,0x00101108,
    0x04000000,0x04100000,0x04000100,0x04100100,
    0x04000008,0x04100008,0x04000108,0x04100108,
    0x04001000,0x04101000,0x04001100,0x04101100,
    0x04001008,0x04101008,0x04001108,0x04101108,
    0x00020000,0x00120000,0x00020100,0x00120100,
    0x00020008,0x00120008,0x00020108,0x00120108,
    0x00021000,0x00121000,0x00021100,0x00121100,
    0x00021008,0x00121008,0x00021108,0x00121108,
    0x04020000,0x04120000,0x04020100,0x04120100,
    0x04020008,0x04120008,0x04020108,0x04120108,
    0x04021000,0x04121000,0x04021100,0x04121100,
    0x04021008,0x04121008,0x04021108,0x04121108
  };
  private static final int keyTable4[]={
    0x00000000,0x10000000,0x00010000,0x10010000,
    0x00000004,0x10000004,0x00010004,0x10010004,
    0x20000000,0x30000000,0x20010000,0x30010000,
    0x20000004,0x30000004,0x20010004,0x30010004,
    0x00100000,0x10100000,0x00110000,0x10110000,
    0x00100004,0x10100004,0x00110004,0x10110004,
    0x20100000,0x30100000,0x20110000,0x30110000,
    0x20100004,0x30100004,0x20110004,0x30110004,
    0x00001000,0x10001000,0x00011000,0x10011000,
    0x00001004,0x10001004,0x00011004,0x10011004,
    0x20001000,0x30001000,0x20011000,0x30011000,
    0x20001004,0x30001004,0x20011004,0x30011004,
    0x00101000,0x10101000,0x00111000,0x10111000,
    0x00101004,0x10101004,0x00111004,0x10111004,
    0x20101000,0x30101000,0x20111000,0x30111000,
    0x20101004,0x30101004,0x20111004,0x30111004
  };
  private static final int keyTable5[]={
    0x00000000,0x08000000,0x00000008,0x08000008,
    0x00000400,0x08000400,0x00000408,0x08000408,
    0x00020000,0x08020000,0x00020008,0x08020008,
    0x00020400,0x08020400,0x00020408,0x08020408,
    0x00000001,0x08000001,0x00000009,0x08000009,
    0x00000401,0x08000401,0x00000409,0x08000409,
    0x00020001,0x08020001,0x00020009,0x08020009,
    0x00020401,0x08020401,0x00020409,0x08020409,
    0x02000000,0x0A000000,0x02000008,0x0A000008,
    0x02000400,0x0A000400,0x02000408,0x0A000408,
    0x02020000,0x0A020000,0x02020008,0x0A020008,
    0x02020400,0x0A020400,0x02020408,0x0A020408,
    0x02000001,0x0A000001,0x02000009,0x0A000009,
    0x02000401,0x0A000401,0x02000409,0x0A000409,
    0x02020001,0x0A020001,0x02020009,0x0A020009,
    0x02020401,0x0A020401,0x02020409,0x0A020409
  };
  private static final int keyTable6[]={
    0x00000000,0x00000100,0x00080000,0x00080100,
    0x01000000,0x01000100,0x01080000,0x01080100,
    0x00000010,0x00000110,0x00080010,0x00080110,
    0x01000010,0x01000110,0x01080010,0x01080110,
    0x00200000,0x00200100,0x00280000,0x00280100,
    0x01200000,0x01200100,0x01280000,0x01280100,
    0x00200010,0x00200110,0x00280010,0x00280110,
    0x01200010,0x01200110,0x01280010,0x01280110,
    0x00000200,0x00000300,0x00080200,0x00080300,
    0x01000200,0x01000300,0x01080200,0x01080300,
    0x00000210,0x00000310,0x00080210,0x00080310,
    0x01000210,0x01000310,0x01080210,0x01080310,
    0x00200200,0x00200300,0x00280200,0x00280300,
    0x01200200,0x01200300,0x01280200,0x01280300,
    0x00200210,0x00200310,0x00280210,0x00280310,
    0x01200210,0x01200310,0x01280210,0x01280310
  };
  private static final int keyTable7[]={
    0x00000000,0x04000000,0x00040000,0x04040000,
    0x00000002,0x04000002,0x00040002,0x04040002,
    0x00002000,0x04002000,0x00042000,0x04042000,
    0x00002002,0x04002002,0x00042002,0x04042002,
    0x00000020,0x04000020,0x00040020,0x04040020,
    0x00000022,0x04000022,0x00040022,0x04040022,
    0x00002020,0x04002020,0x00042020,0x04042020,
    0x00002022,0x04002022,0x00042022,0x04042022,
    0x00000800,0x04000800,0x00040800,0x04040800,
    0x00000802,0x04000802,0x00040802,0x04040802,
    0x00002800,0x04002800,0x00042800,0x04042800,
    0x00002802,0x04002802,0x00042802,0x04042802,
    0x00000820,0x04000820,0x00040820,0x04040820,
    0x00000822,0x04000822,0x00040822,0x04040822,
    0x00002820,0x04002820,0x00042820,0x04042820,
    0x00002822,0x04002822,0x00042822,0x04042822
  };
  private final static int sbox0[]= {
      0x02080800, 0x00080000, 0x02000002, 0x02080802,
      0x02000000, 0x00080802, 0x00080002, 0x02000002,
      0x00080802, 0x02080800, 0x02080000, 0x00000802,
      0x02000802, 0x02000000, 0x00000000, 0x00080002,
      0x00080000, 0x00000002, 0x02000800, 0x00080800,
      0x02080802, 0x02080000, 0x00000802, 0x02000800,
      0x00000002, 0x00000800, 0x00080800, 0x02080002,
      0x00000800, 0x02000802, 0x02080002, 0x00000000,
      0x00000000, 0x02080802, 0x02000800, 0x00080002,
      0x02080800, 0x00080000, 0x00000802, 0x02000800,
      0x02080002, 0x00000800, 0x00080800, 0x02000002,
      0x00080802, 0x00000002, 0x02000002, 0x02080000,
      0x02080802, 0x00080800, 0x02080000, 0x02000802,
      0x02000000, 0x00000802, 0x00080002, 0x00000000,
      0x00080000, 0x02000000, 0x02000802, 0x02080800,
      0x00000002, 0x02080002, 0x00000800, 0x00080802
  };
  private final static int sbox1[]= {
      0x40108010, 0x00000000, 0x00108000, 0x40100000,
      0x40000010, 0x00008010, 0x40008000, 0x00108000,
      0x00008000, 0x40100010, 0x00000010, 0x40008000,
      0x00100010, 0x40108000, 0x40100000, 0x00000010,
      0x00100000, 0x40008010, 0x40100010, 0x00008000,
      0x00108010, 0x40000000, 0x00000000, 0x00100010,
      0x40008010, 0x00108010, 0x40108000, 0x40000010,
      0x40000000, 0x00100000, 0x00008010, 0x40108010,
      0x00100010, 0x40108000, 0x40008000, 0x00108010,
      0x40108010, 0x00100010, 0x40000010, 0x00000000,
      0x40000000, 0x00008010, 0x00100000, 0x40100010,
      0x00008000, 0x40000000, 0x00108010, 0x40008010,
      0x40108000, 0x00008000, 0x00000000, 0x40000010,
      0x00000010, 0x40108010, 0x00108000, 0x40100000,
      0x40100010, 0x00100000, 0x00008010, 0x40008000,
      0x40008010, 0x00000010, 0x40100000, 0x00108000
  };
  private final static int sbox2[]= {
      0x04000001, 0x04040100, 0x00000100, 0x04000101,
      0x00040001, 0x04000000, 0x04000101, 0x00040100,
      0x04000100, 0x00040000, 0x04040000, 0x00000001,
      0x04040101, 0x00000101, 0x00000001, 0x04040001,
      0x00000000, 0x00040001, 0x04040100, 0x00000100,
      0x00000101, 0x04040101, 0x00040000, 0x04000001,
      0x04040001, 0x04000100, 0x00040101, 0x04040000,
      0x00040100, 0x00000000, 0x04000000, 0x00040101,
      0x04040100, 0x00000100, 0x00000001, 0x00040000,
      0x00000101, 0x00040001, 0x04040000, 0x04000101,
      0x00000000, 0x04040100, 0x00040100, 0x04040001,
      0x00040001, 0x04000000, 0x04040101, 0x00000001,
      0x00040101, 0x04000001, 0x04000000, 0x04040101,
      0x00040000, 0x04000100, 0x04000101, 0x00040100,
      0x04000100, 0x00000000, 0x04040001, 0x00000101,
      0x04000001, 0x00040101, 0x00000100, 0x04040000
  };
  private final static int sbox3[]= {
      0x00401008, 0x10001000, 0x00000008, 0x10401008,
      0x00000000, 0x10400000, 0x10001008, 0x00400008,
      0x10401000, 0x10000008, 0x10000000, 0x00001008,
      0x10000008, 0x00401008, 0x00400000, 0x10000000,
      0x10400008, 0x00401000, 0x00001000, 0x00000008,
      0x00401000, 0x10001008, 0x10400000, 0x00001000,
      0x00001008, 0x00000000, 0x00400008, 0x10401000,
      0x10001000, 0x10400008, 0x10401008, 0x00400000,
      0x10400008, 0x00001008, 0x00400000, 0x10000008,
      0x00401000, 0x10001000, 0x00000008, 0x10400000,
      0x10001008, 0x00000000, 0x00001000, 0x00400008,
      0x00000000, 0x10400008, 0x10401000, 0x00001000,
      0x10000000, 0x10401008, 0x00401008, 0x00400000,
      0x10401008, 0x00000008, 0x10001000, 0x00401008,
      0x00400008, 0x00401000, 0x10400000, 0x10001008,
      0x00001008, 0x10000000, 0x10000008, 0x10401000
  };
  private final static int sbox4[]= {
      0x08000000, 0x00010000, 0x00000400, 0x08010420,
      0x08010020, 0x08000400, 0x00010420, 0x08010000,
      0x00010000, 0x00000020, 0x08000020, 0x00010400,
      0x08000420, 0x08010020, 0x08010400, 0x00000000,
      0x00010400, 0x08000000, 0x00010020, 0x00000420,
      0x08000400, 0x00010420, 0x00000000, 0x08000020,
      0x00000020, 0x08000420, 0x08010420, 0x00010020,
      0x08010000, 0x00000400, 0x00000420, 0x08010400,
      0x08010400, 0x08000420, 0x00010020, 0x08010000,
      0x00010000, 0x00000020, 0x08000020, 0x08000400,
      0x08000000, 0x00010400, 0x08010420, 0x00000000,
      0x00010420, 0x08000000, 0x00000400, 0x00010020,
      0x08000420, 0x00000400, 0x00000000, 0x08010420,
      0x08010020, 0x08010400, 0x00000420, 0x00010000,
      0x00010400, 0x08010020, 0x08000400, 0x00000420,
      0x00000020, 0x00010420, 0x08010000, 0x08000020
  };
  private final static int sbox5[]= {
      0x80000040, 0x00200040, 0x00000000, 0x80202000,
      0x00200040, 0x00002000, 0x80002040, 0x00200000,
      0x00002040, 0x80202040, 0x00202000, 0x80000000,
      0x80002000, 0x80000040, 0x80200000, 0x00202040,
      0x00200000, 0x80002040, 0x80200040, 0x00000000,
      0x00002000, 0x00000040, 0x80202000, 0x80200040,
      0x80202040, 0x80200000, 0x80000000, 0x00002040,
      0x00000040, 0x00202000, 0x00202040, 0x80002000,
      0x00002040, 0x80000000, 0x80002000, 0x00202040,
      0x80202000, 0x00200040, 0x00000000, 0x80002000,
      0x80000000, 0x00002000, 0x80200040, 0x00200000,
      0x00200040, 0x80202040, 0x00202000, 0x00000040,
      0x80202040, 0x00202000, 0x00200000, 0x80002040,
      0x80000040, 0x80200000, 0x00202040, 0x00000000,
      0x00002000, 0x80000040, 0x80002040, 0x80202000,
      0x80200000, 0x00002040, 0x00000040, 0x80200040
  };
  private final static int sbox6[]= {
      0x00004000, 0x00000200, 0x01000200, 0x01000004,
      0x01004204, 0x00004004, 0x00004200, 0x00000000,
      0x01000000, 0x01000204, 0x00000204, 0x01004000,
      0x00000004, 0x01004200, 0x01004000, 0x00000204,
      0x01000204, 0x00004000, 0x00004004, 0x01004204,
      0x00000000, 0x01000200, 0x01000004, 0x00004200,
      0x01004004, 0x00004204, 0x01004200, 0x00000004,
      0x00004204, 0x01004004, 0x00000200, 0x01000000,
      0x00004204, 0x01004000, 0x01004004, 0x00000204,
      0x00004000, 0x00000200, 0x01000000, 0x01004004,
      0x01000204, 0x00004204, 0x00004200, 0x00000000,
      0x00000200, 0x01000004, 0x00000004, 0x01000200,
      0x00000000, 0x01000204, 0x01000200, 0x00004200,
      0x00000204, 0x00004000, 0x01004204, 0x01000000,
      0x01004200, 0x00000004, 0x00004004, 0x01004204,
      0x01000004, 0x01004200, 0x01004000, 0x00004004
  };
  private final static int sbox7[]= {
      0x20800080, 0x20820000, 0x00020080, 0x00000000,
      0x20020000, 0x00800080, 0x20800000, 0x20820080,
      0x00000080, 0x20000000, 0x00820000, 0x00020080,
      0x00820080, 0x20020080, 0x20000080, 0x20800000,
      0x00020000, 0x00820080, 0x00800080, 0x20020000,
      0x20820080, 0x20000080, 0x00000000, 0x00820000,
      0x20000000, 0x00800000, 0x20020080, 0x20800080,
      0x00800000, 0x00020000, 0x20820000, 0x00000080,
      0x00800000, 0x00020000, 0x20000080, 0x20820080,
      0x00020080, 0x20000000, 0x00000000, 0x00820000,
      0x20800080, 0x20020080, 0x20020000, 0x00800080,
      0x20820000, 0x00000080, 0x00800080, 0x20020000,
      0x20820080, 0x00800000, 0x20800000, 0x20000080,
      0x00820000, 0x00020080, 0x20020080, 0x20800000,
      0x00000080, 0x20820000, 0x00820080, 0x00000000,
      0x20000000, 0x20800080, 0x00020000, 0x00820080
  };

  // the expanded key
  private int [] keyData;
  
  /**
   * Creates a new DesCipher object for en- and decrypting.
   */
  public DES()
  {
    this(8);
  }
  
  /**
   * for derived classes as DES2 (2-key 3-DES) and DES3 (3-key 3-DES).
   * @param kl set the key length
   */
  protected DES(int kl)
  {
    super(8);
    keyLen = kl;
  }

   /**
    * Set the key for encryption and decryption.
    * @param key the given key, an array with 8 bytes
    */
  public void setKeyUnchecked( byte[] key )
  {
    makeKeyData(key);
  }
  
  /**
   * fill internal keydata.
   * @param key provided key data
   */
  private void makeKeyData( byte[] key )
  {
	keyData = new int[32];
	  
    int c, d, in = 0;
    c  = (key[in++]&0xff)      ;
    c |= (key[in++]&0xff) <<  8;
    c |= (key[in++]&0xff) << 16;
    c |= (key[in++]&0xff) << 24;

    d  = (key[in++]&0xff)      ;
    d |= (key[in++]&0xff) <<  8;
    d |= (key[in++]&0xff) << 16;
    d |= (key[in  ]&0xff) << 24;


    int t;
    // PERM_OP (d,c,t,4,0x0f0f0f0fL);
    t = ((d>>>4) ^ c) & 0x0f0f0f0f;
    c^=t;
    d^=t<<4;

    //HPERM_OP(c,t,-2,0xcccc0000L);
    t = ((c << (16 - -2))^c) & 0xcccc0000;
    c = c ^ t ^ (t>>>(16 - -2));

    //HPERM_OP(d,t,-2,0xcccc0000L);
    t = ((d << (16 - -2))^d) & 0xcccc0000;
    d = d ^ t ^ (t>>>(16 - -2));

    // PERM_OP (d,c,t,1,0x55555555L);
    t = ((d>>>1) ^ c) & 0x55555555;
    c^=t;
    d^=t<<1;
    //PERM_OP (c,d,t,8,0x00ff00ffL);
    t = ((c>>>8) ^ d) & 0x00ff00ff;
    d^=t;
    c^=t<<8;
    //PERM_OP (d,c,t,1,0x55555555L);
    t = ((d>>>1) ^ c) & 0x55555555;
    c^=t;
    d^=t<<1;

    d= (((d&0x000000ff) <<16)| (d&0x0000ff00)     |
       (( d&0x00ff0000)>>>16)|((c&0xf0000000)>>>4));
    c&=0x0fffffff;

    for (int i = 0, k = 0; i< 16; i++)
    {
      if (shift[i] > 0)
      {
        c=(c>>>2)|(c<<26);
        d=(d>>>2)|(d<<26);
      }
      else
      {
        c=(c>>>1)|(c<<27);
        d=(d>>>1)|(d<<27);
      }
      c&=0x0fffffff;
      d&=0x0fffffff;
      // could be a few less shifts but I am to lazy at this point in time to investigate
      int
      s=
        keyTable0[ (c    )&0x3f                  ]|
        keyTable1[((c>>> 6)&0x03)|((c>>> 7)&0x3c)]|
        keyTable2[((c>>>13)&0x0f)|((c>>>14)&0x30)]|
        keyTable3[((c>>>20)&0x01)|((c>>>21)&0x06) |
                ((c>>>22)&0x38)];
      t=
        keyTable4[ (d    )&0x3f                  ]|
        keyTable5[((d>>> 7)&0x03)|((d>>> 8)&0x3c)]|
        keyTable6[ (d>>>15)&0x3f                 ]|
        keyTable7[((d>>>21)&0x0f)|((d>>>22)&0x30)];

      /* table contained 0213 4657 */
      int
      t2=((t<<16)|(s&0x0000ffff));

      // ROTATE(t2,30);
      keyData[k++] = (((t2)>>>(30))+((t2)<<(32-(30))));

      t2 = ((s>>>16)|(t&0xffff0000));
      
      // ROTATE(t2,26);
      keyData[k++] = (((t2)>>>(26))+((t2)<<(32-(26)))); 
    }
  }

  /**
   * Set the key for encryption and decryption.
   * @param key the given key, an array with 8 bytes
   */
  public void setKey( byte[] key )
  {
    establishParity ( key );
    makeKeyData(key);
  }
  
  private final void des(byte [] inData, int inOff, byte [] outData, int outOff, int inc)
  {
    // get next 8 bytes
    int
    r  = (inData[inOff++]&0xff)      ;
    r |= (inData[inOff++]&0xff) <<  8;
    r |= (inData[inOff++]&0xff) << 16;
    r |= (inData[inOff++]&0xff) << 24;
    int
    l  = (inData[inOff++]&0xff)      ;
    l |= (inData[inOff++]&0xff) <<  8;
    l |= (inData[inOff++]&0xff) << 16;
    l |= (inData[inOff  ]&0xff) << 24;

    // initial permutation
    int
    work   = ((l >>>  4) ^ r) & 0x0f0f0f0f;
    r ^= work;
    l ^= (work << 4);

    work   = ((r >>> 16) ^ l) & 0x0000ffff;
    l ^= work;
    r ^= (work << 16);

    work   = ((l >>>  2) ^ r) & 0x33333333;
    r ^= work;
    l ^= (work << 2);

    work   = ((r >>>  8) ^ l) & 0x00ff00ff;
    l ^= work;
    r ^= (work << 8);

    work   = ((l >>>  1) ^ r) & 0x55555555;
    r ^= work;
    l ^= (work << 1);

    r = (((r)>>>(29))+((r)<<(32-(29)))); //ROTATE(r,29);
    l = (((l)>>>(29))+((l)<<(32-(29)))); //ROTATE(l,29);

    // do encryption
    for (int i = inc > 0 ? 0 : 30, end = inc > 0 ? 32 : -2; i != end;)
    {
      int u = r ^ keyData[i];
      int t = r ^ keyData[i+1];

      t = (((t)>>>(4))+((t)<<(32-(4)))); //ROTATE(t,4);

      l ^= sbox0[(u>>> 2)&0x3f]^
           sbox2[(u>>>10)&0x3f]^
           sbox4[(u>>>18)&0x3f]^
           sbox6[(u>>>26)     ]^
           sbox1[(t>>> 2)&0x3f]^
           sbox3[(t>>>10)&0x3f]^
           sbox5[(t>>>18)&0x3f]^
           sbox7[(t>>>26)     ];

      i += inc;
      
      u = l ^ keyData[i];
      t = l ^ keyData[i+1];

      t = (((t)>>>(4))+((t)<<(32-(4)))); //ROTATE(t,4);

      r ^= sbox0[(u>>> 2)&0x3f]^
           sbox2[(u>>>10)&0x3f]^
           sbox4[(u>>>18)&0x3f]^
           sbox6[(u>>>26)     ]^
           sbox1[(t>>> 2)&0x3f]^
           sbox3[(t>>>10)&0x3f]^
           sbox5[(t>>>18)&0x3f]^
           sbox7[(t>>>26)     ];

      i += inc;
      
    }      
    // final permutation
    l = (((l)>>>(3))+((l)<<(32-(3)))); // ROTATE(l,3);
    r = (((r)>>>(3))+((r)<<(32-(3)))); //ROTATE(r,3);
    
    work   = ((r >>>  1) ^ l) & 0x55555555;
    l ^= work;
    r ^= (work << 1);

    work   = ((l >>>  8) ^ r) & 0x00ff00ff;
    r ^= work;
    l ^= (work << 8);

    work   = ((r >>> 2) ^ l) & 0x33333333;
    l ^= work;
    r ^= (work << 2);

    work   = ((l >>>  16) ^ r) & 0x0000ffff;
    r ^= work;
    l ^= (work << 16);

    work   = ((r >>>  4) ^ l) & 0x0f0f0f0f;
    l ^= work;
    r ^= (work << 4);
    
    // write data out
    outData[outOff++] = (byte)(l       );
    outData[outOff++] = (byte)(l >>>  8);
    outData[outOff++] = (byte)(l >>> 16);
    outData[outOff++] = (byte)(l >>> 24);
    outData[outOff++] = (byte)(r       );
    outData[outOff++] = (byte)(r >>>  8);
    outData[outOff++] = (byte)(r >>> 16);
    outData[outOff  ] = (byte)(r >>> 24);
  }


  /**
   * Encrypt one block of [block size] bytes.
   * You may use one byte array as input data and output data, to encrypt in place.
   * @param clearText input data which is encrypted
   * @param clearOff offset into input data
   * @param cipherText output data which is encrypted.
   * @param cipherOff offset into output data
   */
  public void encrypt( byte[] clearText, int clearOff, byte[] cipherText, int cipherOff )
  {
    des(clearText, clearOff, cipherText, cipherOff, 2 );
  }

  /**
   * Decrypt one block of [block size] bytes.
   * You may use one byte array as input data and output data, to decrypt in place.
   * @param cipherText output data which is encrypted.
   * @param cipherOff offset into output data
   * @param clearText input data which is encrypted
   * @param clearOff offset into input data
   */
  public void decrypt( byte[] cipherText, int cipherOff, byte[] clearText, int clearOff )
  {
    des(cipherText, cipherOff, clearText, clearOff, -2);
  }

  /**
   * Check if the given key is a weak key.
   * @param key this key is testes against the known weak keys.
   * @return true if the key is a weak key.
   */
  static public final boolean keyIsWeak ( byte[] key )
  {
    for (int j = 0; j < key.length; j+= 8)
    {
      long keyValue = 0;
      for (int i = 0; i < 8; ++i)
        keyValue |= ((long)(key[j+i]&0xff))<<(56-i*8);

      for ( int i = 0; i < weakKeys.length; i++ )
      {
        if ( keyValue == weakKeys[i] )
        {
          return true;
        }
      }
    }

    return false;
  }
  /**
   * Add an odd parity to the given key.
   * @param key this key is made odd.
   */
  static public final void establishParity ( byte[] key )
  {
    for ( int i = 0; i < key.length; i++ )
    {
      if (!isOdd(key[i]))
        key[i] ^= 0x01;
    }
  }
  /**
   * test whether a byte contains an odd count of 1 bits.
   * @param _v a byte
   * @return true if the byte contains an odd count of 1 bits.
   */
  static public final boolean isOdd(byte _v)
  {
    int v = _v&0xff;
    v = (v>>>4) ^ (v&0xf);
    v = (v>>>2) ^ (v&0x3);
    return (v>>>1) != (v&0x1);
  }


  /**
   * Create a new DES key and ensure that it is not a weak key.
   * @return a new allocated byte array containing the key.
   */
  public byte[] generateKey()
  {
     byte[] key = new byte[keyLen];
          
     for(boolean repeat = true;repeat;)
     {      
       do
       {
         SecureRandom.instance.nextBytes ( key );
         establishParity ( key );
       } while ( keyIsWeak ( key ) );
       
       // compare all key parts - all must be different!
       repeat = false;
       for (int i = 0; i < key.length && !repeat; i+= 8)
       {
         for (int j = i+8; j < key.length && !repeat; j+= 8)
         {
           boolean equal = true;
           for (int k = 0; k < 8; ++k)
             equal &= key[i+k] == key[j+k];
           repeat |= equal;
         }
       }
     }

     return key;
  }

	@Override
	public boolean hasKey() {
		return keyData != null;
	}
}

/*
 * $Log: DES.java,v $
 * Revision 1.3  2003/10/01 12:25:21  bebbo
 * @C enhanced comments
 *
 * Revision 1.2  2001/04/13 18:53:02  bebbo
 * @I renamed to makeKeyData
 *
 * Revision 1.1  2000/09/25 12:20:58  bebbo
 * @N repackaged
 *
 */
